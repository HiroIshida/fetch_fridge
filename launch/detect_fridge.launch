<launch>
  <arg name="fetch" default="false"/>
  <arg name="remote" default="true"/>
  <arg name="camera" default="head_camera_remote" if="$(arg remote)"/>
  <arg name="camera" default="head_camera" unless="$(arg remote)"/>
  <arg name="use_mask" default="false"/>

  <include file="$(find fetch_fridge)/launch/reproduce_pc.launch" if="$(arg remote)"/>
  <include file="$(find pr2_moveit_config)/launch/move_group.launch" unless="$(arg fetch)"/>
  <arg name="input_image" default="/$(arg camera)/rgb/image_rect_color"/>
  <arg name="input_camera_info" default="/$(arg camera)/rgb/camera_info"/>


  <group ns="/$(arg camera)/rgb">

    <node name="fridge_demo_sift" pkg="imagesift" type="imagesift"
          output="screen">
      <remap from="image" to="$(arg input_image)" />
      <remap from="camera_info" to="$(arg input_camera_info)"/>
      <rosparam>
        use_mask: false
      </rosparam>
    </node>

    <node name="fridge_detector" pkg="jsk_perception" type="point_pose_extractor">
      <remap from="object_pose" to="fridge_pose"/> 
      <rosparam subst_value="true">
        template_filename: $(find fetch_fridge)/data/asile.jpg
        window_name: fridge_handle_upper
        object_width: 0.42
        object_height: 0.297
        relative_pose: '0.145 0.21 0.0 0.707107 0 -0.707107 0'
        viewer_window: false
      </rosparam>
    </node>

    <node name="handle_detector" pkg="jsk_perception" type="point_pose_extractor">
      <remap from="object_pose" to="handle_pose"/> 
      <rosparam subst_value="true">
        template_filename: $(find fetch_fridge)/data/openni_rgb_fridge.png
        window_name: fridge_handle_upper
        object_width: 0.231
        object_height: 0.196
        relative_pose: '0.22 0.05 0.075  0.707107 0 -0.707107 0'
        viewer_window: false
      </rosparam>
    </node>
  </group>


  <!-- please add fetch -->
  <arg name="input" default="/$(arg camera)/depth_registered/points"/>
  <arg name="box_filter_frame" default="/head_mount_kinect_rgb_optical_frame" unless="$(arg fetch)"/>

  <group ns="/fridge_cloud">
    <node name="boxfilter_pre" pkg="nodelet" type="nodelet"
      args="standalone jsk_pcl/AttentionClipper"
      output="screen">
      <remap from="~input/points" to="$(arg input)"/>
      <rosparam>
        use_multiple_attention: false
      </rosparam>
      <param name="dimension_x" value="1"/>
      <param name="dimension_y" value="1"/>
      <param name="dimension_z" value="3"/>
      <param name="initial_pos" value="[0.0 0.0 0.0]"/>
      <param name="frame_id" value="$(arg box_filter_frame)" />
    </node>

    <node name="ExtractIndices" pkg="nodelet" type="nodelet"
      args="standalone jsk_pcl/ExtractIndices"
      output="screen">
      <remap from="~input" to="$(arg input)"/>
      <remap from="~indices" to="boxfilter_pre/output/point_indices"/>
      <rosparam>
        keep_organized: true
      </rosparam>
    </node>

    <node name="transformer" pkg="nodelet" type="nodelet"
          args="standalone jsk_pcl/TfTransformCloud"
          output="screen">
          <remap from="~input" to="ExtractIndices/output"/>
      <rosparam>
        target_frame_id: base_link
      </rosparam>
    </node>

    <node name="multi_plane_estimate" pkg="nodelet" type="nodelet"
          args="standalone jsk_pcl/OrganizedMultiPlaneSegmentation"
          output="screen">
      <remap from="~input" to="transformer/output" />
      <rosparam>
        max_curvature: 0.01
        estimate_normal: true
      </rosparam>
    </node>

    <node name="multi_plane_extraction" pkg="nodelet" type="nodelet"
      args="standalone jsk_pcl/MultiPlaneExtraction"
      output="screen">
      <remap from="~input" to="ExtractIndices/output"/>
      <remap from="~input_polygons" to="multi_plane_estimate/output_polygon"/>
      <remap from="~input_coefficients" to="multi_plane_estimate/output_coefficuents"/>
      <remap from="~indices" to="multi_plane_estimate/output"/>
    </node>
  </group>


  <!-- run dummy node, otherwise fridge_detector's publishing topics are not updated -->
  <node pkg="fetch_fridge" type="dummy_subscriber.py" name="dummy_subscriber" output="screen"/>
  <node pkg="fetch_fridge" type="republisher.py" name="republisher" output="screen"/>
  <node pkg="fetch_fridge" type="base_scan.py" name="base_scan_analyzer" output="screen"/>
</launch>
